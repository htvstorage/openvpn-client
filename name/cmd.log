   79  for x in `ls agg/*/HPG*table.log`; do echo $x; tail -n1 $x; done >> HPG.log
   80  for x in `ls agg/*/HPG*table.log`; do echo $x; tail -n2 $x; done > HPG.log
   81  for x in `ls agg/*/HPG*table.log`; do echo $x; tail -n3 $x; done > HPG.log
   82  for x in `ls agg/*/HPG*csv`; do echo $x; tail -n3 $x; done > HPG.log

for x in `ls agg/20230201/*csv`; do awk -F, 'END{print substr(FILENAME,14,3)" "$2" "$3 }' $x; done |sort -nk3 > all


for x in `ls agg/*/VCB*csv`; do awk -F, 'END{print substr(FILENAME,5,8)" "substr(FILENAME,14,3)" "$2" "$3 }' $x; done |sort -nk1|egrep -v "20221207|20221208|20221209"


for x in `ls vnindex/*/VN*csv`; do awk -F, 'END{print substr(FILENAME,9,8)" "substr(FILENAME,18,7)" "$1" "$2 }' $x; done |sort -nk1|egrep -v "20221207|20221208|20221209"

for s in `ls agg/20230207/*.csv`; do echo $s|cut -d/ -f 3|cut -d_ -f1; done > symbols2.txt
for s in `ls agg/20230207/*HOSE*.csv`; do echo $s|cut -d "/" -f 3|cut -d "_" -f1; done > hose.txt
for s in `ls agg/20230207/*HOSE*.csv`; do echo $s|awk -F/ '{print substr($3,0,3)}'; done > hose.txt
total=`cat symbols.txt |wc -l`;
count=0;
for s in `cat symbols.txt`; do 
echo $s; 
file=`ls agg/*/$s*csv`
for x in $file; do awk -F, 'END{print substr(FILENAME,5,8)" "substr(FILENAME,14,3)" "$2" "$3 }' $x; done |sort -nk1|egrep -v "20221207|20221208|20221209" > all/$s.txt
done|more

total=`cat symbols.txt |wc -l`;
count=0;
for s in `cat symbols.txt`; do
count=`bc <<< $count' +1'`
echo $s" "$count"/"$total" "`bc <<< 'scale=4; '$count'*100/'$total`
   tail -n 10 all/$s.txt > process/$s.txt
done




total=`cat hose.txt |wc -l`;
count=0;
echo > update.txt
for s in `cat hose.txt`; do 
   ##echo $s;
   ##expr length $s
   current=`date +%s%3N`; 
   current=`bc <<< $current'/(5*60*1000)*5*60*1000 + 7*60*60*1000 - 60*60*1000'`;
   Y=`date +"%Y"`;
   m=`date +"%m"`;
   d=`date +"%d"`;   
   ##echo $s;
   for x in `ls trans/20230208/$s*.txt`; do 
      awk -F, -v current=$current -v symbol=$s -v Y=$Y -v m=$m -v d=$d\
      '{t=substr($5,2,8);  gsub(":"," ",t);  time=mktime(Y" "m" "d" "t)*1000; if(time > current) {print symbol" "time" "$1" "$2" "$3" "$0}}'\
      $x; 
   done >> update.txt
done
grep sd update.txt|sort -nk5|tail -n 20
grep bu update.txt|sort -nk5|tail -n 20




|more


print "Number of seconds since the Epoch = " mktime("2014 12 14 30 20 10")


awk -v val1=2 -v val2="HI" 'BEGIN{print val1;print val2}'
date +%s%3N


for s in `cat symbols.txt`; do 
   awk 'BEGIN{sum = 0}{ sum += $4}END{print $2" "sum}' process/$s.txt
done

while true; do node dumpdaily.js; node muaban.js date=20230208 ; ./top.sh; sleep 300; done

while true; do node quickdumpdaily.js; node muaban.js date=20230208 ; ./top.sh; sleep 20; done

while true; do node quickdumpdaily.js; node muaban.js date=20230208 ; cp agg/20230208/HPG_HOSE_table.log HPG.log; sleep 20; done

ln -s agg/`date +"%Y%m%d"`/HPG_HOSE_table.log HPG`date +"%Y%m%d"`.log
while true; do node quickdumpdaily.js; node muaban.js date=`date +"%Y%m%d"` ; cp agg/`date +"%Y%m%d"`/HPG_HOSE_table.log HPG.log; sleep 20; done

ln -s vnindex/`date +"%Y%m%d"`/VNINDEX_HOSE_table.log VNINDEX`date +"%Y%m%d"`.log
while true; do node dumpdaily.js; node muaban.js date=`date +"%Y%m%d"` ; ./top.sh; sleep 200; done


ln -s vnindex/`date +"%Y%m%d"`/VNINDEX_HOSE_table.log VNINDEX`date +"%Y%m%d"`.log
while true; do node script/dumpdaily.js; node script/muaban.js date=`date +"%Y%m%d"` ; ./top.sh; sleep 200; done

while true; do node script/dumpdaily2.js stock=ssi; node script/muaban.js date=`date +"%Y%m%d"` ; ./top.sh; sleep 200; done
while true; do node script/quickdumpdaily.js; node script/muaban.js date=`date +"%Y%m%d"` ; cp agg/`date +"%Y%m%d"`/HPG_HOSE_table.log HPG.log; sleep 20; done

s="HPG SBS STB PLC CTG MBB"
for x in $s ;do echo $x; 
ln -s $PWD/agg/`date +"%Y%m%d"`/$x"_"*"_table.log" links/$x`date +"%Y%m%d"`.log
done

s="HPG SBS STB PLC CTG MBB HBC HHV KSB LCG NKG SHS"
for x in $s ;do echo $x; 
ln -s $PWD/agg/`date +"%Y%m%d"`/$x"_"*"_table.log" links/$x`date +"%Y%m%d"`.log
done


s="HPG SBS STB PLC CTG MBB"
for x in $s ;do echo $x; 
d=`date +"%d"`
d=`bc <<< $d' - 1'`
if [[ $d -le 9 ]]; then
   d="0"$d
fi
ln -s $PWD/agg/`date +"%Y%m"$d`/$x"_"*"_table.log" links/$x`date +"%Y%m"$d`.log
done

s="ACB BCM BID BVH CTG FPT GAS GVR HDB HPG MBB MSN MWG NVL PDR PLX POW SAB SSI STB TCB TPB VCB VHM VIB VIC VJC VNM VPB VRE"
for x in $s ;do echo $x; 
ln -s $PWD/agg/`date +"%Y%m%d"`/$x"_"*"_table.log" links/vn30/$x`date +"%Y%m%d"`.log
done

ln -s agg/`date +"%Y%m%d"`/HPG_HOSE_table.log HPG`date +"%Y%m%d"`.log

ln -s $PWD/agg/`date +"%Y%m%d"`/CTG_*_table.log links/CTG_`date +"%Y%m%d"`.log


while true; do node script/quickdumpdaily.js; node script/muaban.js date=`date +"%Y%m%d"` ; cp agg/`date +"%Y%m%d"`/HPG_HOSE_table.log HPG.log; sleep 20; done


for s in `cat symbols.txt`; do 
   awk 'BEGIN{sum = 0; sum_sd; sum_bu}{ sum += $4; sum_sd += $7; sum_bu += $6;}END{if(sum_sd == 0) sum_sd = 0.001; print $2" "sum" bu "sum_bu" sd "sum_sd" busd "(sum_bu/sum_sd)}' process/$s.txt
done


total=`cat symbols.txt |wc -l`;
count=0;
for s in `cat symbols.txt`; do
count=`bc <<< $count' +1'`
echo $s" "$count"/"$total" "`bc <<< 'scale=4; '$count'*100/'$total`
grep -v acum_busd all/$s"avg.txt"|awk 'BEGIN{sum = 0; sum_sd; sum_bu; count; minbusd=99999999999; maxbusd=-99999999999; minsd=99999999999; maxsd=-99999999999; minbu=99999999999; maxbu=-99999999999}'\
'{ sum += $4; sum_sd += $7; sum_bu += $6; count += 1; if(minbusd> $4) minbusd = $4; if(maxbusd < $4) maxbusd = $4;'\
'if(minsd> $7 && length($7) > 0) minsd = $7; if(maxsd < $7) maxsd = $7;'\
'if(minbu > $6 && length($6) > 0) minbu = $6; if(maxbu < $6) maxbu = $6;}'\
'END{if(sum_sd == 0) sum_sd = 0.001; print $2" "sum" bu "sum_bu" sd "sum_sd" busd "sum_bu/sum_sd" '\
'abu "int(sum_bu/count)" asd "int(sum_sd/count)" abusd "int(sum/count)" minbusd "minbusd" maxbusd "maxbusd" minsd "minsd" maxsd "maxsd" minbu "minbu" maxbu "maxbu}' > process/$s"avg.txt"
done






nohup node  script/dumpdaily2.js stock=24HMONEY >> dum.log 2>&1 < /dev/null &
nohup node  script/dumpdaily2.js stock=VIETSTOCK >> dum.log 2>&1 < /dev/null &
nohup node  script/dumpdaily2.js stock=SSI >> dum.log 2>&1 < /dev/null &
nohup node  script/dumpdaily2.js stock=TCBS >> dum.log 2>&1 < /dev/null &
nohup node  script/dumpdaily2.js stock=VCI >> dum.log 2>&1 < /dev/null &
nohup node  script/dumpdaily2.js stock=VCBS >> dum.log 2>&1 < /dev/null &


docker run -d --name=firefox -p 5800:5800 -v //workspace/config:/config:rw -v /workspace:/workspace:rw --shm-size 2g -e "DISPLAY_WIDTH=1920" -e "DISPLAY_HEIGHT=1080" jlesage/firefox

8 11 65 68
70
78
83
84

grep "res: 1000" nohup.out |sort -k14|awk '{x=substr($16,length("split/extendURL.txt.")+2,2); a[x]=x}END{for(i=1;i<77;i++) if(a[i <10?"0"i:i] == "") print i}'

while true; do node script/dumpdaily2.js stock=ssi; node script/muaban.js date=`date +"%Y%m%d"` ; ./top.sh; sleep 200; done >> dum.log 2>&1 < /dev/null &
while true; do node script/quickdumpdaily.js; node script/muaban.js date=`date +"%Y%m%d"` ; cp agg/`date +"%Y%m%d"`/HPG_HOSE_table.log HPG.log; sleep 20; done >> dum.log 2>&1 < /dev/null &

ln -s vnindex/`date +"%Y%m%d"`/VNINDEX_HOSE_table.log VNINDEX`date +"%Y%m%d"`.log



for s in `cat symbols.txt`; do 
echo $s; 
dd=`date +"%Y%m%d"`;
for x in `ls agg/$dd/$s*csv`; do awk -F, 'BEGIN{val_sd=0;val_bu=0;}{val_sd += $30; val_bu += $29;}END{print substr(FILENAME,5,8)" "substr(FILENAME,14,3)" "$2" "$3" "$4" "val_bu" "val_sd }' $x; done |sort -nk1|egrep -v "20221207|20221208|20221209" > all/$s.txt
for x in `ls agg/$dd/$s*csv`; do awk -F, '{print substr(FILENAME,5,8)" "substr(FILENAME,14,3)" "$2" "$3" "$4" "$29" "$30 }' $x; done |sort -nk1|egrep -v "20221207|20221208|20221209" > all/$s"avg".txt
done



while true; do node script/stat.js >> stat.log sleep 30; done

while true; do echo > stat.log; sleep 300; done




s="VRE VHM"
for x in $s ;do echo $x; 
ln -s $PWD/agg/`date +"%Y%m%d"`/$x"_"*"_table.log" links/$x`date +"%Y%m%d"`.log
done


s="VRE VHM"
for x in $s ;do echo $x; 
d=`date +"%d"`
d=`bc <<< $d' - 1'`
ln -s $PWD/agg/`date +"%Y%m"$d`/$x"_"*"_table.log" links/$x`date +"%Y%m"$d`.log
done



 node script/price.js ; node script/filter200.js 



 export NODE_TLS_REJECT_UNAUTHORIZED=0


node  script/dumpdaily2.js stock=SSI; node script/muabanx.js outlier=true date=`date +"%Y%m%d"` threshold=8 interval=600000
node script/price.js; node script/filter200x.js checkdate=-1


node script/muabanx.js outlier=true date=`date +"%Y%m%d"` threshold=2 interval=600000


node script/muabanx.js outlier=true model=true interval=600000 date=`date +"%Y%m%d"`

node script/muabanx.js outlier=true  interval=600000 date=`date +"%Y%m%d"`


node script/muabanx.js outlier=true  interval=600000 date=20230331

node script/muabanx.js join=true  interval=600000 date=20221230

node script/muabanx.js outlier=true model=true interval=600000 date=20230331


node script/muabanx.js join=true  interval=3600000 
node script/muabanx.js join=true  interval=300000 
node script/muabanx.js outlier=true model=true interval=300000 date=`date +"%Y%m%d"`
node script/muabanx.js outlier=true model=true interval=3600000 date=20230331



node  script/dumpdaily2.js stock=SSI; node script/muabanx.js outlier=true date=`date +"%Y%m%d"` threshold=8 interval=300000


a=await fetch("https://smartone.vps.com.vn/Api/Proxy", {
  "headers": {
    "accept": "application/json, text/javascript, */*; q=0.01",
    "accept-language": "en-US,en;q=0.9,vi-VN;q=0.8,vi;q=0.7",
    "content-type": "application/json; charset=UTF-8",
    "sec-ch-ua": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"",
    "sec-ch-ua-mobile": "?0",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-origin",
    "x-requested-with": "XMLHttpRequest",
    "cookie": "_fbp=fb.2.1669623965921.1893403188; _ga_M9VTXEHK9C=GS1.1.1669958644.2.0.1669958644.0.0.0; listStockSelected=AAA%2C; _ga_QW53DJZL1X=GS1.1.1676003181.15.0.1676003181.0.0.0; _ga_790K9595DC=GS1.1.1676003177.47.1.1676003416.0.0.0; _ga=GA1.1.1812813168.1668398014; listStockId=c5fdffb840c74452b106f1b2505eb9a1; listStockName=hpg; listStock=HPG%2CHSG%2CNKG%2CNVL%2CSHS%2CHAG%2CAPS%2CAPG%2CVIX%2CHPX%2CPDR%2CVGI%2CYEG%2CBCG%2CPOM%2CCSI%2CVIB%2CVIC%2CIBC%2CDNN%2CHQC%2CHT1%2CPLC%2CCEN%2CNED%2CCLX%2CPC1%2CKSB%2CVCG; ASP.NET_SessionId=vfswa314ug1wwnz2aeyd2va5; __RequestVerificationToken=ZCJ6bRUvsFfjLBb6rSGDFJ37i_Cu3c8XRenzSKYiByLBx8krjO7FSI_K6NexH0uJ262HNzv9GwFIRZfRkKZUUM-EdF81; DefaultAccount=4986391; _ga_4WDBKERLGC=GS1.1.1681185614.100.0.1681185614.0.0.0; startPs=06-07-2020; endPs=05-07-2020; startSMOTP=13-10-2020; endSMOTP=12-10-2020"
  },
  "referrer": "https://smartone.vps.com.vn/",
  "referrerPolicy": "strict-origin-when-cross-origin",
  "body": "{\"group\":\"B\",\"user\":\"498639\",\"session\":\"17520615-d6df-4083-bdba-8f9fa14d45b5\",\"data\":{\"type\":\"cursor\",\"cmd\":\"PPL_GetAll\",\"p1\":\"4986391\",\"p2\":\"\",\"p3\":\"01/01/2022\",\"p4\":\"10/04/2023\",\"p5\":\"1\",\"p6\":\"1000\"}}",
  "method": "POST",
  "mode": "cors"
});

let z = await a.json()


z.data.map(e=>e.C_PROFIT_LOSS).reduce((a,b)=>{return a+b },0)

z.data.map(e=>{ return {code:e.C_SHARE_CODE,val:e.C_PROFIT_LOSS}})

x1=z.data.map(e=>{ return {code:e.C_SHARE_CODE,val:e.C_PROFIT_LOSS}})

while true; do node  script/dumpdaily2.js stock=SSI; node script/muabanx.js outlier=true date=`date +"%Y%m%d"` threshold=8 interval=300000; sleep 20; done >> dum.log 2>&1 < /dev/null &